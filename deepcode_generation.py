import os
from utils.chat_log import ChatLog
from utils.chatlog2code import Chatlog2Code


class DLcodeGeneration:
    """
    For a specific benchmark task, design and use a certain prompt technology to generate deep learning code,
    and save the code and chat logs in time and order.
    """

    def __init__(self, count_num, save_code_path, save_log_path):
        """
        Paras:
        1.count_num: int, mark the number of experiments
        2.save_code_path: str, the path to save the code generated by LLM
        3.save_log_path: str, the path to save the chat logs interacted with LLM
        """
        self.count_num = count_num
        self.save_code_path = save_code_path
        self.save_log_path = save_log_path

    def prompt2llm(
        self,
        model,
        tokenizer,
        prompt_designer,
        tasks_requirement,
        chat2llm,
        temperature,
        top_p,
        max_new_tokens,
    ):
        """
        Paras:
        1.model: str, the LLM model to be called, note that the model is an entity of the deployment method
        2.prompt_designer: class, the prompt words to be used
        3.tasks_requirement: specific task requirements
        4.chat2llm: class, class interacting
        5.temperature: float, temperature of generated code
        6.top_p: float, top_p of generated code
        7.max_new_tokens: int, maximum length of generated code
        """
        # get prompt
        prompting = prompt_designer().prompt(tasks_requirement)
        # get conversation from LLM
        response = chat2llm.chat(
            model=model,
            tokenizer=tokenizer,
            prompting=prompting,
            temperature=temperature,
            top_p=top_p,
            max_new_tokens=max_new_tokens,
        )

        return prompting, response

    def save(self, prompting, response):
        """
        save the generated code and chat logs
        """
        # save chat logs
        if not os.path.exists(self.save_log_path):
            os.makedirs(self.save_log_path)
        chatloger = ChatLog(self.save_log_path, prompting, response)
        _, log_file = chatloger.save_chat_log(self.count_num)

        if not os.path.exists(self.save_code_path):
            os.makedirs(self.save_code_path) 
            
        chatlog2coder = Chatlog2Code(
            log_file_path=log_file, save_code_path=self.save_code_path
        )
        matched_code = chatlog2coder.read_yamldata_to_pycode()

        return matched_code
