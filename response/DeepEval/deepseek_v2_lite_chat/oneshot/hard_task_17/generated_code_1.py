import keras
from keras.layers import Input, Dense, Flatten, Concatenate, Conv2D, MaxPooling2D, GlobalAveragePooling2D, Activation

def dl_model():
    # Define the input shape
    input_shape = (32, 32, 3)
    
    # Define the input layer
    inputs = Input(shape=input_shape)
    
    # Block 1: Feature extraction using global average pooling
    block1 = GlobalAveragePooling2D()(inputs)
    
    # Fully connected layer 1
    fc1 = Dense(units=128)(block1)
    
    # Fully connected layer 2
    fc2 = Dense(units=64)(fc1)
    
    # Reshape the output of the fully connected layers to match the input shape
    reshaped_output = Reshape((input_shape[1], input_shape[2], input_shape[3]))(fc2)
    
    # Multiply the reshaped output with weights generated by global average pooling
    weight_output = Conv2D(filters=input_shape[1]*input_shape[2]*input_shape[3], kernel_size=(1, 1), padding='same', activation='linear')(reshaped_output)
    
    # Block 2: Deep feature extraction with convolutional layers and max pooling
    # Convolutional layer 1
    conv1 = Conv2D(filters=32, kernel_size=(3, 3), padding='same')(inputs)
    
    # Convolutional layer 2
    conv2 = Conv2D(filters=64, kernel_size=(3, 3), padding='same')(inputs)
    
    # Max pooling layer
    pool = MaxPooling2D(pool_size=(2, 2))(inputs)
    
    # Concatenate the output of the two convolutional layers
    concatenated_output = Concatenate()([conv1, conv2])
    
    # Add the branch from Block 1 to the concatenated output
    fused_output = Concatenate()([concatenated_output, block1])
    
    # Fully connected layer 3
    fc3 = Dense(units=128)(fused_output)
    
    # Fully connected layer 4
    fc4 = Dense(units=64)(fc3)
    
    # Output layer
    outputs = Dense(units=10, activation='softmax')(fc4)
    
    # Construct the model
    model = Model(inputs=inputs, outputs=outputs)
    
    return model

# Instantiate the model
model = dl_model()

# Print the model summary
model.summary()